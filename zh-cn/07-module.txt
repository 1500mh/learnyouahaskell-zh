<p>= 模块 (Modules) #modules</p>

<p>== 装载模块</p>

<p>[$../img/modules.png]</p>

<p>Haskell 中的模块是含有一组相关的函数，类型和类型类的组合。而 Haskell 进程的本质便是从主模块中引用其它模块并调用其中的函数来执行操作。这样可以把代码分成多块，只要一个模块足够的独立，它里面的函数便可以被不同的进程反复重用。这就让不同的代码各司其职，提高了代码的健壮性。</p>

<p>Haskell 的标准库就是一组模块，每个模块都含有一组功能相近或相关的函数和类型。有处理 List 的模块，有处理并发的模块，也有处理复数的模块，等等。目前为止我们谈及的所有函数,类型以及类型类都是 <code>Prelude</code> 模块的一部分，它缺省自动装载。在本章，我们看一下几个常用的模块，在开始浏览其中的函数之前，我们先得知道如何装载模块.</p>

<p>在 Haskell中，装载模块的语法为 <code>import</code>，这必须得在函数的定义之前，所以一般都是将它置于代码的顶部。无疑，一段代码中可以装载很多模块，只要将 <code>import</code> 语句分行写开即可。装载 <code>Data.List</code> 试下，它里面有很多实用的 List 处理函数.</p>

<p>执行 <code>import Data.List</code>，这样一来 <code>Data.List</code> 中包含的所有函数就都进入了全局命名空间。也就是说，你可以在代码的任意位置调用这些函数.<code>Data.List</code> 模块中有个 <code>nub</code> 函数，它可以筛掉一个 List 中的所有重复元素。用点号将 <code>length</code> 和 <code>nub</code> 组合: <code>length . nub</code>，即可得到一个与 <code>(\xs -&gt; length (nub xs))</code> 等价的函数。</p>

<p>{{
import Data.List  </p>

<p>numUniques :: (Eq a) =&gt; [a] -&gt; Int<br>
numUniques = length . nub<br>
}}</p>

<p>你也可以在 ghci 中装载模块，若要调用 <code>Data.List</code> 中的函数，就这样:</p>

<p>{{
ghci&gt; :m Data.List<br>
}}</p>

<p>若要在 ghci 中装载多个模块，不必多次 <code>:m</code> 命令，一下就可以全部搞定:</p>

<p>{{
ghci&gt; :m Data.List Data.Map Data.Set<br>
}}</p>

<p>而你的进程中若已经有包含的代码，就不必再用 <code>:m</code> 了.</p>

<p>如果你只用得到某模块的两个函数，大可仅包含它俩。若仅装载 <code>Data.List</code> 模块 <code>nub</code> 和 <code>sort</code>，就这样:</p>

<p>{{
import Data.List (nub，sort)<br>
}}</p>

<p>也可以只包含除去某函数之外的其它函数，这在避免多个模块中函数的命名冲突很有用。假设我们的代码中已经有了一个叫做 <code>nub</code> 的函数，而装入 <code>Data.List</code> 模块时就要把它里面的 <code>nub</code> 除掉.</p>

<p>{{
import Data.List hiding (nub) 
}}</p>

<p>避免命名冲突还有个方法，便是 <code>qualified import</code>，<code>Data.Map</code> 模块提供一了一个按键索值的数据结构，它里面有几个和 <code>Prelude</code> 模块重名的函数。如 <code>filter</code> 和 <code>null</code>，装入 <code>Data.Map</code> 模块之后再调用 <code>filter</code>，Haskell 就不知道它究竟是哪个函数。如下便是解决的方法:</p>

<p>{{
import qualified Data.Map<br>
}}</p>

<p>这样一来，再调用 <code>Data.Map</code> 中的 <code>filter</code> 函数，就必须得 <code>Data.Map.filter</code>，而 <code>filter</code> 依然是为我们熟悉喜爱的样子。但是要在每个函数前面都加 <code>个Data.Map</code> 实在是太烦人了! 那就给它起个别名，让它短些:</p>

<p>{{
import qualified Data.Map as M<br>
}}</p>

<p>好，再调用 <code>Data.Map</code> 模块的 <code>filter</code> 函数的话仅需 <code>M.filter</code> 就行了</p>

<p>要浏览所有的标准库模块，参考这个手册。翻阅标准库中的模块和函数是提升个人 Haskell 水平的重要途径。你也可以各个模块的源代码，这对 Haskell 的深入学习及掌握都是大有好处的.</p>

<p>检索函数或搜寻函数字置就用 [http://www.Haskell.org/hoogle/ Hoogle]，相当了不起的 Haskell 搜索引擎! 你可以用函数名，模块名甚至类型声明来作为检索的条件.</p>

<p>== Data.List</p>

<p>显而易见，<code>Data.List</code> 是关于 List 操作的模块，它提供了一组非常有用的 List 处理函数。在前面我们已经见过了其中的几个函数(如 <code>map</code> 和 <code>filter</code>)，这是 <code>Prelude</code> 模块出于方便起见，导出了几个 <code>Data.List</code> 里的函数。因为这几个函数是直接引用自 <code>Data.List</code>，所以就无需使用 <code>qualified import</code>。在下面，我们来看看几个以前没见过的函数:</p>

<p><strong>intersperse</strong> 取一个元素与 List 作参数，并将该元素置于 List 中每对元素的中间。如下是个例子:</p>

<p>{{
ghci&gt; intersperse &#39;.&#39; &quot;MONKEY&quot;<br>
&quot;M.O.N.K.E.Y&quot;<br>
ghci&gt; intersperse 0 [1,2,3,4,5,6]<br>
[1,0,2,0,3,0,4,0,5,0,6]<br>
}}</p>

<p><strong>intercalate</strong> 取两个 List 作参数。它会将第一个 List 交叉插入第二个 List 中间，并返回一个 List.</p>

<p>{{
ghci&gt; intercalate &quot; &quot; [&quot;hey&quot;,&quot;there&quot;,&quot;guys&quot;]<br>
&quot;hey there guys&quot;<br>
ghci&gt; intercalate [0,0,0] [[1,2,3],[4,5,6],[7,8,9]]<br>
[1,2,3,0,0,0,4,5,6,0,0,0,7,8,9]<br>
}}</p>

<p><strong>transpose</strong> 函数可以反转一组 List 的 List。你若把一组 List 的 List 看作是个 2D 的矩阵，那 <code>transpose</code> 的操作就是将其列为行。</p>

<p>{{
ghci&gt; transpose [[1,2,3],[4,5,6],[7,8,9]]<br>
[[1,4,7],[2,5,8],[3,6,9]]<br>
ghci&gt; transpose [&quot;hey&quot;,&quot;there&quot;,&quot;guys&quot;]<br>
[&quot;htg&quot;,&quot;ehu&quot;,&quot;yey&quot;,&quot;rs&quot;,&quot;e&quot;]<br>
}}</p>

<p>假如有两个多项式 <code>3x&lt;sup&gt;2&lt;/sup&gt; + 5x + 9</code>，<code>10x&lt;sup&gt;3&lt;/sup&gt; + 9</code> 和 <code>8x&lt;sup&gt;3&lt;/sup&gt; + 5x&lt;sup&gt;2&lt;/sup&gt; + x - 1</code>，将其相加，我们可以列三个 List: <code>[0,3,5,9]</code>，<code>[10,0,0,9]</code> 和 <code>[8,5,1,-1]</code> 来表示。再用如下的方法取得结果.</p>

<p>{{
ghci&gt; map sum $ transpose [[0,3,5,9],[10,0,0,9],[8,5,1,-1]]<br>
[18,8,6,17]<br>
}}</p>

<p>[^../img/legolists.png]</p>

<p>使用 <code>transpose</code> 处理这三个 List 之后，三次幂就到了第一行，二次幂到了第二行，以此类推。在用 <code>sum</code> 函数将其映射，即可得到正确的结果。</p>

<p><strong>foldl&#39;</strong> 和 <strong>foldl1&#39;</strong> 是它们各自惰性实现的严格版本。在用 <code>fold</code> 处理较大的 List 时，经常会遇到堆栈溢出的问题。而这罪魁祸首就是 <code>fold</code> 的惰性: 在执行 <code>fold</code> 时，累加器的值并不会被立即更新，而是做一个&quot;在必要时会取得所需的结果&quot;的承诺。每过一遍累加器，这一行为就重复一次。而所有的这堆&quot;承诺&quot;最终就会塞满你的堆栈。严格的 <code>fold</code> 就不会有这一问题，它们不会作&quot;承诺&quot;，而是直接计算中间值的结果并继续执行下去。如果用惰性 <code>fold</code> 时经常遇到溢出错误，就应换用它们的严格版。</p>

<p><strong>concat</strong> 把一组 List 连接为一个 List。</p>

<p>{{
ghci&gt; concat [&quot;foo&quot;,&quot;bar&quot;,&quot;car&quot;]<br>
&quot;foobarcar&quot;<br>
ghci&gt; concat [[3,4,5],[2,3,4],[2,1,1]]<br>
[3,4,5,2,3,4,2,1,1]<br>
}}</p>

<p>它相当于移除一级嵌套。若要彻底地连接其中的元素，你得 <code>concat</code> 它两次才行.</p>

<p><strong>concatMap</strong> 函数与 <code>map</code> 一个 List 之后再 <code>concat</code> 它等价.</p>

<p>{{
ghci&gt; concatMap (replicate 4) [1..3]<br>
[1,1,1,1,2,2,2,2,3,3,3,3]<br>
}}</p>

<p><strong>and</strong> 取一组布林值 List 作参数。只有其中的值全为 <code>True</code> 的情况下才会返回 <code>True</code>。</p>

<p>{{
ghci&gt; and $ map (&gt;4) [5,6,7,8]<br>
True<br>
ghci&gt; and $ map (==4) [4,4,4,3,4]<br>
False<br>
}}</p>

<p><strong>or</strong> 与 <code>and</code> 相似，一组布林值 List 中若存在一个 <code>True</code> 它就返回 <code>True</code>.</p>

<p>{{
ghci&gt; or $ map (==4) [2,3,4,5,6,1]<br>
True<br>
ghci&gt; or $ map (&gt;4) [1,2,3]<br>
False<br>
}}</p>

<p><strong>any</strong> 和 <strong>all</strong> 取一个限制条件和一组布林值 List 作参数，检查是否该 List 的某个元素或每个元素都符合该条件。通常较 <code>map</code> 一个 List 到 <code>and</code> 或 <code>or</code> 而言，使用 <code>any</code> 或 <code>all</code> 会更多些。</p>

<p>{{
ghci&gt; any (==4) [2,3,5,6,1,4]<br>
True<br>
ghci&gt; all (&gt;4) [6,9,10]<br>
True<br>
ghci&gt; all (<code>elem</code> [&#39;A&#39;..&#39;Z&#39;]) &quot;HEYGUYSwhatsup&quot;<br>
False<br>
ghci&gt; any (<code>elem</code> [&#39;A&#39;..&#39;Z&#39;]) &quot;HEYGUYSwhatsup&quot;<br>
True<br>
}}</p>

<p><strong>iterate</strong> 取一个函数和一个值作参数。它会用该值去调用该函数并用所得的结果再次调用该函数，产生一个无限的 List.</p>

<p>{{
ghci&gt; take 10 $ iterate (*2) 1<br>
[1,2,4,8,16,32,64,128,256,512]<br>
ghci&gt; take 3 $ iterate (++ &quot;haha&quot;) &quot;haha&quot;<br>
[&quot;haha&quot;,&quot;hahahaha&quot;,&quot;hahahahahaha&quot;]<br>
}}</p>

<p><strong>splitAt</strong> 取一个 List 和数值作参数，将该 List 在特定的位置断开。返回一个包含两个 List 的二元组.</p>

<p>{{
ghci&gt; splitAt 3 &quot;heyman&quot;<br>
(&quot;hey&quot;,&quot;man&quot;)<br>
ghci&gt; splitAt 100 &quot;heyman&quot;<br>
(&quot;heyman&quot;,&quot;&quot;)<br>
ghci&gt; splitAt (-3) &quot;heyman&quot;<br>
(&quot;&quot;,&quot;heyman&quot;)<br>
ghci&gt; let (a,b) = splitAt 3 &quot;foobar&quot; in b ++ a<br>
&quot;barfoo&quot;<br>
}}</p>

<p><strong>takeWhile</strong> 这一函数十分的实用。它从一个 List 中取元素，一旦遇到不符合条件的某元素就停止.</p>

<p>{{
ghci&gt; takeWhile (&gt;3) [6,5,4,3,2,1,2,3,4,5,4,3,2,1]<br>
[6,5,4]<br>
ghci&gt; takeWhile (/=&#39; &#39;) &quot;This is a sentence&quot;<br>
&quot;This&quot;<br>
}}</p>

<p>如果要求所有三次方小于 1000 的数的和，用 <code>filter</code> 来过滤 <code>map (^3) [1..]</code> 所得结果中所有小于 1000 的数是不行的。因为对无限 List 执行的 <code>filter</code> 永远都不会停止。你已经知道了这个 List 是单增的，但 Haskell 不知道。所以应该这样：</p>

<p>{{
ghci&gt; sum $ takeWhile (&lt;10000) $ map (^3) [1..]<br>
53361<br>
}}</p>

<p>用 <code>(^3)</code> 处理一个无限 List，而一旦出现了大于 10000 的元素这个 List 就被切断了，sum 到一起也就轻而易举.</p>

<p><strong>dropWhile</strong> 与此相似，不过它是扔掉符合条件的元素。一旦限制条件返回 <code>False</code>，它就返回 List 的余下部分。方便实用!</p>

<p>{{
ghci&gt; dropWhile (/=&#39; &#39;) &quot;This is a sentence&quot;<br>
&quot; is a sentence&quot;<br>
ghci&gt; dropWhile (&lt;3) [1,2,2,2,3,4,5,4,3,2,1]<br>
[3,4,5,4,3,2,1]<br>
}}</p>

<p>给一 <code>Tuple</code> 组成的 List，这 Tuple 的首项表示股票价格，第二三四项分别表示年,月,日。我们想知道它是在哪天首次突破 $1000 的!</p>

<p>{{
ghci&gt; let stock = [(994.4,2008,9,1),(995.2,2008,9,2),(999.2,2008,9,3),(1001.4,2008,9,4),(998.3,2008,9,5)]<br>
ghci&gt; head (dropWhile ((val,y,m,d) -&gt; val &lt; 1000) stock)<br>
(1001.4,2008,9,4)<br>
}}</p>

<p><strong>span</strong> 与 <code>takeWhile</code> 有点像，只是它返回两个 List。第一个 List 与同参数调用 <code>takeWhile</code> 所得的结果相同，第二个 List 就是原 List 中余下的部分。</p>

<p>{{
ghci&gt; let (fw，rest) = span (/=&#39; &#39;) &quot;This is a sentence&quot; in &quot;First word:&quot; ++ fw ++ &quot;，the rest:&quot; ++ rest<br>
&quot;First word: This，the rest: is a sentence&quot;<br>
}}</p>

<p><strong>span</strong> 是在条件首次为 <code>False</code> 时断开 List，而 <code>break</code> 则是在条件首次为 <code>True</code> 时断开 <code>List</code>。<code>break p</code> 与 <code>span (not . p)</code> 是等价的.</p>

<p>{{
ghci&gt; break (==4) <a href="%5B1,2,3%5D,%5B4,5,6,7%5D">1,2,3,4,5,6,7</a><br>
ghci&gt; span (/=4) <a href="%5B1,2,3%5D,%5B4,5,6,7%5D">1,2,3,4,5,6,7</a><br>
}}</p>

<p><strong>break</strong> 返回的第二个 List 就会以第一个符合条件的元素开头。</p>

<p><strong>sort</strong> 可以排序一个 List，因为只有能够作比较的元素才可以被排序，所以这一 List 的元素必须是 Ord 类型类的实例类型。</p>

<p>{{
ghci&gt; sort [8,5,3,2,1,6,4,2]<br>
[1,2,2,3,4,5,6,8]<br>
ghci&gt; sort &quot;This will be sorted soon&quot;<br>
&quot; Tbdeehiillnooorssstw&quot;
}}</p>

<p><strong>group</strong> 取一个 List 作参数，并将其中相邻并相等的元素各自归类，组成一个个子 List.</p>

<p>{{
ghci&gt; group [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]<br>
[[1,1,1,1],[2,2,2,2],[3,3],[2,2,2],[5],[6],[7]] 
}}</p>

<p>若在 <code>group</code> 一个 List 之前给它排序就可以得到每个元素在该 List 中的出现次数。</p>

<p>{{
ghci&gt; map (\l@(x:xs) -&gt; (x,length l)) . group . sort $ [1,1,1,1,2,2,2,2,3,3,2,2,2,5,6,7]<br>
[(1,4),(2,7),(3,2),(5,1),(6,1),(7,1)]<br>
}}</p>

<p><strong>inits</strong> 和 <strong>tails</strong> 与 <code>init</code> 和 <code>tail</code> 相似，只是它们会递归地调用自身直到什么都不剩，看:</p>

<p>{{
ghci&gt; inits &quot;w00t&quot;<br>
[&quot;&quot;,&quot;w&quot;,&quot;w0&quot;,&quot;w00&quot;,&quot;w00t&quot;]<br>
ghci&gt; tails &quot;w00t&quot;<br>
[&quot;w00t&quot;,&quot;00t&quot;,&quot;0t&quot;,&quot;t&quot;,&quot;&quot;]<br>
ghci&gt; let w = &quot;w00t&quot; in zip (inits w) (tails w)<br>
[(&quot;&quot;,&quot;w00t&quot;),(&quot;w&quot;,&quot;00t&quot;),(&quot;w0&quot;,&quot;0t&quot;),(&quot;w00&quot;,&quot;t&quot;),(&quot;w00t&quot;,&quot;&quot;)]<br>
}}</p>

<p>我们用 <code>fold</code> 实现一个搜索子 List 的函数:</p>

<p>{{
search :: (Eq a) =&gt; [a] -&gt; [a] -&gt; Bool<br>
search needle haystack =<br>
  let nlen = length needle<br>
  in foldl (\acc x -&gt; if take nlen x == needle then True else acc) False (tails haystack)<br>
}}</p>

<p>首先，对搜索的 List 调用 <code>tails</code>，然后遍历每个 List 来检查它是不是我们想要的.</p>

<p>由此我们便实现了一个类似 <strong>isInfixOf</strong> 的函数，<strong>isInfixOf</strong> 从一个 List 中搜索一个子 List，若该 List 包含子 List，则返回 <code>True</code>.</p>

<p>{{
ghci&gt; &quot;cat&quot; <code>isInfixOf</code> &quot;im a cat burglar&quot;<br>
True<br>
ghci&gt; &quot;Cat&quot; <code>isInfixOf</code> &quot;im a cat burglar&quot;<br>
False<br>
ghci&gt; &quot;cats&quot; <code>isInfixOf</code> &quot;im a cat burglar&quot;<br>
False<br>
}}</p>

<p><strong>isPrefixOf</strong> 与 <strong>isSuffixOf</strong> 分别检查一个 List 是否以某子 List 开头或者结尾.</p>

<p>{{
ghci&gt; &quot;hey&quot; <code>isPrefixOf</code> &quot;hey there!&quot;<br>
True<br>
ghci&gt; &quot;hey&quot; <code>isPrefixOf</code> &quot;oh hey there!&quot;<br>
False<br>
ghci&gt; &quot;there!&quot; <code>isSuffixOf</code> &quot;oh hey there!&quot;<br>
True<br>
ghci&gt; &quot;there!&quot; <code>isSuffixOf</code> &quot;oh hey there&quot;<br>
False<br>
}}</p>

<p><strong>elem</strong> 与 <strong>notElem</strong> 检查一个 List 是否包含某元素.</p>

<p><strong>partition</strong> 取一个限制条件和 List 作参数，返回两个 List，第一个 List 中包含所有符合条件的元素，而第二个 List 中包含余下的.</p>

<p>{{
ghci&gt; partition (<code>elem</code> [&#39;A&#39;..&#39;Z&#39;]) &quot;BOBsidneyMORGANeddy&quot;<br>
(&quot;BOBMORGAN&quot;,&quot;sidneyeddy&quot;)<br>
ghci&gt; partition (&gt;3) <a href="%5B5,6,7%5D,%5B1,3,3,2,1,0,3%5D">1,3,5,6,3,2,1,0,3,7</a> 
}}</p>

<p>了解这个与 <code>span</code> 和 <code>break</code> 的差异是很重要的.</p>

<p>{{
ghci&gt; span (<code>elem</code> [&#39;A&#39;..&#39;Z&#39;]) &quot;BOBsidneyMORGANeddy&quot;<br>
(&quot;BOB&quot;,&quot;sidneyMORGANeddy&quot;)<br>
}}</p>

<p><code>span</code> 和 <code>break</code> 会在遇到第一个符合或不符合条件的元素处断开，而 <code>partition</code> 则会遍历整个 List。</p>

<p><strong>find</strong> 取一个 List 和限制条件作参数，并返回首个符合该条件的元素，而这个元素是个 <code>Maybe</code> 值。在下章，我们将深入地探讨相关的算法和数据结构，但在这里你只需了解 <code>Maybe</code> 值是 <code>Just something</code> 或 <code>Nothing</code> 就够了。与一个 List 可以为空也可以包含多个元素相似，一个 <code>Maybe</code> 可以为空，也可以是单一元素。同样与 List 类似，一个 Int 型的 List 可以写作 <code>[Int]</code>，<code>Maybe</code>有个 Int 型可以写作 <code>Maybe Int</code>。先试一下 <code>find</code> 函数再说.</p>

<p>{{
ghci&gt; find (&gt;4) [1,2,3,4,5,6]<br>
Just 5<br>
ghci&gt; find (&gt;9) [1,2,3,4,5,6]<br>
Nothing<br>
ghci&gt; :t find<br>
find :: (a -&gt; Bool) -&gt; [a] -&gt; Maybe a<br>
}}</p>

<p>注意一下 <code>find</code> 的类型，它的返回结果为 <code>Maybe a</code>，这与 <code>[a]</code> 的写法有点像，只是 <code>Maybe</code> 型的值只能为空或者单一元素，而 List 可以为空,一个元素，也可以是多个元素.</p>

<p>想想前面那段找股票的代码，<code>head (dropWhile (\(val,y,m,d) -&gt; val &lt; 1000) stock)</code> 。但 <code>head</code> 并不安全! 如果我们的股票没涨过 $1000 会怎样? <code>dropWhile</code> 会返回一个空 List，而对空 List 取 <code>head</code> 就会引发一个错误。把它改成 <code>find (\(val,y,m,d) -&gt; val &gt; 1000) stock</code> 就安全多啦，若存在合适的结果就得到它, 像 <code>Just (1001.4,2008,9,4)</code>，若不存在合适的元素(即我们的股票没有涨到过 $1000)，就会得到一个 <code>Nothing</code>.</p>

<p><strong>elemIndex</strong> 与 <code>elem</code> 相似，只是它返回的不是布林值，它只是&#39;可能&#39; (Maybe)返回我们找的元素的索引，若这一元素不存在，就返回 <code>Nothing</code>。</p>

<p>{{
ghci&gt; :t elemIndex<br>
elemIndex :: (Eq a) =&gt; a -&gt; [a] -&gt; Maybe Int<br>
ghci&gt; 4 <code>elemIndex</code> [1,2,3,4,5,6]<br>
Just 3<br>
ghci&gt; 10 <code>elemIndex</code> [1,2,3,4,5,6]<br>
Nothing<br>
}}</p>

<p><strong>elemIndices</strong> 与 <code>elemIndex</code> 相似，只不过它返回的是 List，就不需要 <code>Maybe</code> 了。因为不存在用空 List 就可以表示，这就与 <code>Nothing</code> 相似了.</p>

<p>{{
ghci&gt; &#39; &#39; <code>elemIndices</code> &quot;Where are the spaces?&quot;<br>
[5,9,13]<br>
}}</p>

<p><strong>findIndex</strong> 与 <code>find</code> 相似，但它返回的是可能存在的首个符合该条件元素的索引。<strong>findIndices</strong> 会返回所有符合条件的索引.</p>

<p>{{
ghci&gt; findIndex (==4) [5,3,2,1,6,4]<br>
Just 5<br>
ghci&gt; findIndex (==7) [5,3,2,1,6,4]<br>
Nothing<br>
ghci&gt; findIndices (<code>elem</code> [&#39;A&#39;..&#39;Z&#39;]) &quot;Where Are The Caps?&quot;<br>
[0,6,10,14] 
}}</p>

<p>在前面，我们讲过了 <code>zip</code> 和 <code>zipWith</code>，它们只能将两个 List 组到一个二元组数或二参函数中，但若要组三个 List 该怎么办? 好说~ 有 <code>zip3</code>,<code>zip4</code>...,和 <code>zipWith3</code>, <code>zipWith4</code>...直到 7。这看起来像是个 hack，但工作良好。连着组 8 个 List 的情况很少遇到。还有个聪明办法可以组起无限多个 List，但限于我们目前的水平，就先不谈了.</p>

<p>{{
ghci&gt; zipWith3 (\x y z -&gt; x + y + z) [1,2,3] [4,5,2,2] [2,2,3]<br>
[7,9,8]<br>
ghci&gt; zip4 [2,3,3] [2,2,2] [5,5,3] [2,2,2]<br>
[(2,2,5,2),(3,2,5,2),(3,2,3,2)]<br>
}}</p>

<p>与普通的 <code>zip</code> 操作相似，以返回的 List 中长度最短的那个为准.</p>

<p>在处理来自文件或其它地方的输入时，<strong>lines</strong> 会非常有用。它取一个字串作参数。并返回由其中的每一行组成的 List.</p>

<p>{{
ghci&gt; lines &quot;first line\nsecond line\nthird line&quot;<br>
[&quot;first line&quot;,&quot;second line&quot;,&quot;third line&quot;]<br>
}}</p>

<p><code>&#39;\n&#39;</code> 表示unix下的换行符，在 Haskell 的字符中，反斜杠表示特殊字符.</p>

<p><strong>unlines</strong> 是 <code>lines</code> 的反函数，它取一组字串的 List，并将其通过 <code>&#39;\n&#39;</code>合并到一块.</p>

<p>{{
ghci&gt; unlines [&quot;first line&quot;，&quot;second line&quot;，&quot;third line&quot;]<br>
&quot;first line\nsecond line\nthird line\n&quot; 
}}</p>

<p><strong>words</strong> 和 <strong>unwords</strong> 可以把一个字串分为一组单词或执行相反的操作，很有用.</p>

<p>{{
ghci&gt; words &quot;hey these are the words in this sentence&quot;<br>
[&quot;hey&quot;,&quot;these&quot;,&quot;are&quot;,&quot;the&quot;,&quot;words&quot;,&quot;in&quot;,&quot;this&quot;,&quot;sentence&quot;]<br>
ghci&gt; words &quot;hey these are the words in this\nsentence&quot;<br>
[&quot;hey&quot;,&quot;these&quot;,&quot;are&quot;,&quot;the&quot;,&quot;words&quot;,&quot;in&quot;,&quot;this&quot;,&quot;sentence&quot;]<br>
ghci&gt; unwords [&quot;hey&quot;,&quot;there&quot;,&quot;mate&quot;]<br>
&quot;hey there mate&quot;<br>
}}</p>

<p>我们前面讲到了 <strong>nub</strong>，它可以将一个 List 中的重复元素全部筛掉，使该 List 的每个元素都如雪花般独一无二，&#39;nub&#39; 的含义就是&#39;一小块&#39;或&#39;一部分&#39;，用在这里觉得很古怪。我觉得，在函数的命名上应该用更确切的词语，而避免使用老掉牙的过时词汇.</p>

<p>{{
ghci&gt; nub [1,2,3,4,3,2,1,2,3,4,3,2,1]<br>
[1,2,3,4]<br>
ghci&gt; nub &quot;Lots of words and stuff&quot;<br>
&quot;Lots fwrdanu&quot;<br>
}}</p>

<p><strong>delete</strong> 取一个元素和 List 作参数，会删掉该 List 中首次出现的这一元素.</p>

<p>{{
ghci&gt; delete &#39;h&#39; &quot;hey there ghang!&quot;<br>
&quot;ey there ghang!&quot;<br>
ghci&gt; delete &#39;h&#39; . delete &#39;h&#39; $ &quot;hey there ghang!&quot;<br>
&quot;ey tere ghang!&quot;<br>
ghci&gt; delete &#39;h&#39; . delete &#39;h&#39; . delete &#39;h&#39; $ &quot;hey there ghang!&quot;<br>
&quot;ey tere gang!&quot;<br>
}}</p>

<p><strong>\</strong> 表示 List 的差集操作，这与集合的差集很相似，它会除掉左边 List 中所有存在于右边 List 中的元素.</p>

<p>{{
ghci&gt; [1..10] \ [2,5,9]<br>
[1,3,4,6,7,8,10]<br>
ghci&gt; &quot;Im a big baby&quot; \ &quot;big&quot;<br>
&quot;Im a  baby&quot;<br>
}}</p>

<p><strong>union</strong> 与集合的并集也是很相似，它返回两个 List 的并集，即遍历第二个 List 若存在某元素不属于第一个 List，则追加到第一个 List。看，第二个 List 中的重复元素就都没了!</p>

<p>{{
ghci&gt; &quot;hey man&quot; <code>union</code> &quot;man what&#39;s up&quot;<br>
&quot;hey manwt&#39;sup&quot;<br>
ghci&gt; [1..7] <code>union</code> [5..10]<br>
[1,2,3,4,5,6,7,8,9,10]<br>
}}</p>

<p><strong>intersection</strong> 相当于集合的交集。它返回两个 List 的相同部分.</p>

<p>{{
ghci&gt; [1..7] <code>intersect</code> [5..10]<br>
[5,6,7]<br>
}}</p>

<p><strong>insert</strong> 可以将一个元素插入一个可排序的 List，并将其置于首个大于等于它的元素之前，如果使用 <code>insert</code> 来给一个排过序的 List 插入元素，返回的结果依然是排序的.</p>

<p>{{
ghci&gt; insert 4 [1,2,3,5,6,7]<br>
[1,2,3,4,5,6,7]<br>
ghci&gt; insert &#39;g&#39; $ [&#39;a&#39;..&#39;f&#39;] ++ [&#39;h&#39;..&#39;z&#39;]<br>
&quot;abcdefghijklmnopqrstuvwxyz&quot;<br>
ghci&gt; insert 3 [1,2,4,3,2,1]<br>
[1,2,3,4,3,2,1]<br>
}}</p>

<p><code>length</code>，<code>take</code>，<code>drop</code>，<code>splitAt</code>，<code>!!</code> 和 <code>replicate</code> 之类的函数有个共同点。那就是它们的参数中都有个 Int 值（或者返回Int值），我觉得使用 Intergal 或 Num 类型类会更好，但出于历史原因，修改这些会破坏掉许多既有的代码。在 <code>Data.List</code> 中包含了更通用的替代版，如: <code>genericLength，genericTake，genericDrop，genericSplitAt，genericIndex</code> 和 <code>genericReplicate</code>。<code>length</code> 的类型声明为 <code>length :: [a] -&gt; Int</code>，而我们若要像这样求它的平均值，<code>let xs = [1..6] in sum xs / length xs</code> ，就会得到一个类型错误，因为 <code>/</code> 运算符不能对 Int 型使用! 而 <code>genericLength</code> 的类型声明则为 <code>genericLength :: (Num a) =&gt; [b] -&gt; a</code>，Num 既可以是整数又可以是浮点数，<code>let xs = [1..6] in sum xs / genericLength xs</code> 这样再求平均数就不会有问题了.</p>

<p><code>nub</code>, <code>delete</code>, <code>union</code>, <code>intsect</code> 和 <code>group</code> 函数也有各自的通用替代版 <code>nubBy</code>，<code>deleteBy</code>，<code>unionBy</code>，<code>intersectBy</code> 和 <code>groupBy</code>，它们的区别就是前一组函数使用 <code>(==)</code> 来测试是否相等，而带 <code>By</code> 的那组则取一个函数作参数来判定相等性，<code>group</code> 就与 <code>groupBy (==)</code> 等价.</p>

<p>假如有个记录某函数在每秒的值的 List，而我们要按照它小于零或者大于零的交界处将其分为一组子 List。如果用 <code>group</code>，它只能将相邻并相等的元素组到一起，而在这里我们的标准是它们是否互为相反数。<code>groupBy</code> 登场! 它取一个含两个参数的函数作为参数来判定相等性.</p>

<p>{{
ghci&gt; let values = [-4.3，-2.4，-1.2，0.4，2.3，5.9，10.5，29.1，5.3，-2.4，-14.5，2.9，2.3]<br>
ghci&gt; groupBy (\x y -&gt; (x &gt; 0) == (y &gt; 0)) values<br>
[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]<br>
}}</p>

<p>这样一来我们就可以很清楚地看出哪部分是正数，哪部分是负数，这个判断相等性的函数会在两个元素同时大于零或同时小于零时返回 <code>True</code>。也可以写作 <code>\x y -&gt; (x &gt; 0) &amp;&amp; (y &gt; 0) || (x &lt;= 0) &amp;&amp; (y &lt;= 0)</code>。但我觉得第一个写法的可读性更高。<code>Data.Function</code> 中还有个 <code>on</code> 函数可以让它的表达更清晰，其定义如下:</p>

<p>{{
on :: (b -&gt; b -&gt; c) -&gt; (a -&gt; b) -&gt; a -&gt; a -&gt; c<br>
f <code>on</code> g = \x y -&gt; f (g x) (g y)<br>
}}</p>

<p>执行 <code>(==) `on` (&gt; 0)</code> 得到的函数就与 <code>\x y -&gt; (x &gt; 0) == (y &gt; 0)</code> 基本等价。<code>on</code> 与带 <code>By</code> 的函数在一起会非常好用，你可以这样写:</p>

<p>{{
ghci&gt; groupBy ((==) <code>on</code> (&gt; 0)) values<br>
[[-4.3,-2.4,-1.2],[0.4,2.3,5.9,10.5,29.1,5.3],[-2.4,-14.5],[2.9,2.3]]<br>
}}</p>

<p>可读性很高! 你可以大声念出来: 按照元素是否大于零，给它分类！</p>

<p>同样，<code>sort</code>，<code>insert</code>，<code>maximum</code> 和 <code>min</code> 都有各自的通用版本。如 <code>groupBy</code> 类似，<strong>sortBy</strong>，<strong>insertBy</strong>，<strong>maximumBy</strong> 和 <strong>minimumBy</strong> 都取一个函数来比较两个元素的大小。像 <code>sortBy</code> 的类型声明为:  <code>sortBy :: (a -&gt; a -&gt; Ordering) -&gt; [a] -&gt; [a]</code>。前面提过，<code>Ordering</code> 类型可以有三个值,<code>LT</code>，<code>EQ</code> 和 <code>GT</code>。<code>compare</code> 取两个 <code>Ord</code> 类型类的元素作参数，所以 <code>sort</code> 与 <code>sortBy compare</code> 等价.</p>

<p>List 是可以比较大小的，且比较的依据就是其中元素的大小。如果按照其子 List 的长度为标准当如何? 很好，你可能已经猜到了，<code>sortBy</code> 函数.</p>

<p>{{
ghci&gt; let xs = [[5,4,5,4,4],[1,2,3],[3,5,4,3],[],[2],[2,2]]<br>
ghci&gt; sortBy (compare <code>on</code> length) xs<br>
[[],[2],[2,2],[1,2,3],[3,5,4,3],[5,4,5,4,4]]<br>
}}</p>

<p>太绝了! <code>compare `on` length</code>，乖乖，这简直就是英文! 如果你搞不清楚 <code>on</code> 在这里的原理，就可以认为它与 <code>\x y -&gt; length x `compare` length y</code> 等价。通常，与带 <code>By</code> 的函数打交道时，若要判断相等性，则 <code>(==) `on` something</code>。若要判定大小，则 <code>compare `on` something</code>.</p>

<p>== Data.Char</p>

<p>如其名，<code>Data.Char</code> 模块包含了一组用于处理字符的函数。由于字串的本质就是一组字符的 List，所以往往会在 <code>filter</code> 或是 <code>map</code> 字串时用到它.</p>

<p><code>Data.Char</code>模块中含有一系列用于判定字符范围的函数，如下:</p>

<p>[$../img/legochar.png]</p>

<p><strong>isControl</strong> 判断一个字符是否是控制字符。
<strong>isSpace</strong> 判断一个字符是否是空格字符，包括空格，tab，换行符等.
<strong>isLower</strong> 判断一个字符是否为小写.
<strong>isUper</strong> 判断一个字符是否为大写。
<strong>isAlpha</strong> 判断一个字符是否为字母.
<strong>isAlphaNum</strong> 判断一个字符是否为字母或数字.
<strong>isPrint</strong> 判断一个字符是否是可打印的.
<strong>isDigit</strong> 判断一个字符是否为数字.
<strong>isOctDigit</strong> 判断一个字符是否为八进制数字.
<strong>isHexDigit</strong> 判断一个字符是否为十六进制数字.
<strong>isLetter</strong> 判断一个字符是否为字母.
<strong>isMark</strong> 判断是否为 unicode 注音字符，你如果是法国人就会经常用到的.
<strong>isNumber</strong> 判断一个字符是否为数字.
<strong>isPunctuation</strong> 判断一个字符是否为标点符号.
<strong>isSymbol</strong>判断一个字符是否为货币符号.
<strong>isSeperater</strong> 判断一个字符是否为 unicode 空格或分隔符.
<strong>isAscii</strong> 判断一个字符是否在 unicode 字母表的前 128 位。
<strong>isLatin1</strong> 判断一个字符是否在 unicode 字母表的前 256 位.
<strong>isAsciiUpper</strong> 判断一个字符是否为大写的 ascii 字符.
<strong>isAsciiLower</strong> 判断一个字符是否为小写的 ascii 字符.</p>

<p>以上所有判断函数的类型声明皆为 <code>Char -&gt; Bool</code>，用到它们的绝大多数情况都无非就是过滤字串或类似操作。假设我们在写个进程，它需要一个由字符和数字组成的用户名。要实现对用户名的检验，我们可以结合使用 <code>Data.List</code> 模块的 <code>all</code> 函数与 <code>Data.Char</code> 的判断函数.</p>

<p>{{
ghci&gt; all isAlphaNum &quot;bobby283&quot;<br>
True<br>
ghci&gt; all isAlphaNum &quot;eddy the fish!&quot;<br>
False<br>
}}</p>

<p>Kewl~ 免得你忘记，<code>all</code> 函数取一个判断函数和一个 List 做参数，若该 List 的所有元素都符合条件，就返回 <code>True</code>.</p>

<p>也可以使用 <code>isSpace</code> 来实现 <code>Data.List</code> 的 <code>words</code> 函数.</p>

<p>{{
ghci&gt; words &quot;hey guys its me&quot;<br>
[&quot;hey&quot;,&quot;guys&quot;,&quot;its&quot;,&quot;me&quot;]<br>
ghci&gt; groupBy ((==) <code>on</code> isSpace) &quot;hey guys its me&quot;<br>
[&quot;hey&quot;,&quot; &quot;,&quot;guys&quot;,&quot; &quot;,&quot;its&quot;,&quot; &quot;,&quot;me&quot;]<br>
ghci&gt;<br>
}}</p>

<p>Hmm，不错，有点 <code>words</code> 的样子了。只是还有空格在里面，恩，该怎么办? 我知道，用 <code>filter</code> 滤掉它们!</p>

<p>{{
ghci&gt; filter (not . any isSpace) . groupBy ((==) <code>on</code> isSpace) $ &quot;hey guys its me&quot;<br>
[&quot;hey&quot;,&quot;guys&quot;,&quot;its&quot;,&quot;me&quot;]<br>
}}</p>

<p>啊哈.</p>

<p><code>Data.Char</code> 中也含有与 <code>Ordering</code> 相似的类型。<code>Ordering</code> 可以有两个值，<code>LT</code>，<code>GT</code> 和 <code>EQ</code>。这就是个枚举，它表示了两个元素作比较可能的结果. <code>GeneralCategory</code> 类型也是个枚举，它表示了一个字符可能所在的分类。而得到一个字符所在分类的主要方法就是使用  <code>generalCategory</code>  函数.它的类型为: <code>generalCategory :: Char -&gt; GeneralCategory</code>。那 31 个分类就不在此一一列出了，试下这个函数先:</p>

<p>{{
ghci&gt; generalCategory &#39; &#39;<br>
Space<br>
ghci&gt; generalCategory &#39;A&#39;<br>
UppercaseLetter<br>
ghci&gt; generalCategory &#39;a&#39;<br>
LowercaseLetter<br>
ghci&gt; generalCategory &#39;.&#39;<br>
OtherPunctuation<br>
ghci&gt; generalCategory &#39;9&#39;<br>
DecimalNumber<br>
ghci&gt; map generalCategory &quot; \t\nA9?|&quot;<br>
[Space,Control,Control,UppercaseLetter,DecimalNumber,OtherPunctuation,MathSymbol]
}}</p>

<p>由于 <code>GeneralCategory</code> 类型是 <code>Eq</code> 类型类的一部分，使用类似 <code>generalCategory c == Space</code> 的代码也是可以的.</p>

<p><strong>toUpper</strong> 将一个字符转为大写字母，若该字符不是小写字母，就按原值返回.
<strong>toLower</strong> 将一个字符转为小写字母，若该字符不是大写字母，就按原值返回.
<strong>toTitle</strong> 将一个字符转为 title-case，对大多数字符而言，title-case 就是大写.
<strong>digitToInt</strong> 将一个字符转为 Int 值，而这一字符必须得在 <code>&#39;1&#39;..&#39;9&#39;,&#39;a&#39;..&#39;f&#39;</code>或<code>&#39;A&#39;..&#39;F&#39;</code> 的范围之内.</p>

<p>{{
ghci&gt; map digitToInt &quot;34538&quot;<br>
[3,4,5,3,8]<br>
ghci&gt; map digitToInt &quot;FF85AB&quot;<br>
[15,15,8,5,10,11]<br>
}}</p>

<p><code>intToDigit</code> 是 <code>digitToInt</code> 的反函数。它取一个 <code>0</code> 到 <code>15</code> 的 <code>Int</code> 值作参数，并返回一个小写的字符.</p>

<p>{{
ghci&gt; intToDigit 15<br>
&#39;f&#39;<br>
ghci&gt; intToDigit 5<br>
&#39;5&#39;<br>
}}</p>

<p><strong>ord</strong> 与 <strong>char</strong> 函数可以将字符与其对应的数字相互转换.</p>

<p>{{
ghci&gt; ord &#39;a&#39;<br>
97<br>
ghci&gt; chr 97<br>
&#39;a&#39;<br>
ghci&gt; map ord &quot;abcdefgh&quot;<br>
[97,98,99,100,101,102,103,104] 
}}</p>

<p>两个字符的 <code>ord</code> 值之差就是它们在 unicode 字符表上的距离.</p>

<p><em>Caesar ciphar</em> 是加密的基础算法，它将消息中的每个字符都按照特定的字母表进行替换。它的实现非常简单，我们这里就先不管字母表了.</p>

<p>{{
encode :: Int -&gt; String -&gt; String<br>
encode shift msg = 
  let ords = map ord msg<br>
      shifted = map (+ shift) ords<br>
  in map chr shifted<br>
}}</p>

<p>先将一个字串转为一组数字，然后给它加上某数，再转回去。如果你是标准的组合牛仔，大可将函数写为: <code>map (chr . (+ shift) . ord) msg</code>。试一下它的效果:</p>

<p>{{
ghci&gt; encode 3 &quot;Heeeeey&quot;<br>
&quot;Khhhhh|&quot;<br>
ghci&gt; encode 4 &quot;Heeeeey&quot;<br>
&quot;Liiiii}&quot;<br>
ghci&gt; encode 1 &quot;abcd&quot;<br>
&quot;bcde&quot;<br>
ghci&gt; encode 5 &quot;Marry Christmas! Ho ho ho!&quot;<br>
&quot;Rfww~%Hmwnxyrfx&amp;%Mt%mt%mt&amp;&quot;
}}</p>

<p>不错。再简单地将它转成一组数字，减去某数后再转回来就是解密了.</p>

<p>{{
decode :: Int -&gt; String -&gt; String<br>
decode shift msg = encode (negate shift) msg<br>
}}</p>

<p>{{
ghci&gt; encode 3 &quot;Im a little teapot&quot;<br>
&quot;Lp#d#olwwoh#whdsrw&quot;<br>
ghci&gt; decode 3 &quot;Lp#d#olwwoh#whdsrw&quot;<br>
&quot;Im a little teapot&quot;<br>
ghci&gt; decode 5 . encode 5 $ &quot;This is a sentence&quot;<br>
&quot;This is a sentence&quot;<br>
}}</p>

<p>== Data.Map</p>

<p>关联列表(也叫做字典)是按照键值对排列而没有特定顺序的一种 List。例如，我们用关联列表保存电话号码，号码就是值，人名就是键。我们并不关心它们的存储顺序，只要能按人名得到正确的号码就好.在 Haskell 中表示关联列表的最简单方法就是弄一个二元组的 List，而这二元组就首项为键，后项为值。如下便是个表示电话号码的关联列表: </p>

<p>{{
phoneBook = [(&quot;betty&quot;,&quot;555-2938&quot;) ,
             (&quot;bonnie&quot;,&quot;452-2928&quot;) ,
             (&quot;patsy&quot;,&quot;493-2928&quot;) ,
             (&quot;lucille&quot;,&quot;205-2928&quot;) ,
             (&quot;wendy&quot;,&quot;939-8282&quot;) ,
             (&quot;penny&quot;,&quot;853-2492&quot;) ]
}}</p>

<p>不理这貌似古怪的缩进，它就是一组二元组的 List 而已。话说对关联列表最常见的操作就是按键索值，我们就写个函数来实现它。</p>

<p>{{
findKey :: (Eq k) =&gt; k -&gt; [(k,v)] -&gt; v 
findKey key xs = snd . head . filter ((k,v) -&gt; key == k) $ xs<br>
}}</p>

<p>[$../img/legomap.png]</p>

<p>简洁漂亮。这个函数取一个键和 List 做参数，过滤这一 List 仅保留键匹配的项，并返回首个键值对。但若该关联列表中不存在这个键那会怎样? 哼，那就会在试图从空 List 中取 <code>head</code> 时引发一个运行时错误。无论如何也不能让进程就这么轻易地崩溃吧，所以就应该用 <code>Maybe</code> 类型。如果没找到相应的键，就返回 <code>Nothing</code>。而找到了就返回 <code>Just something</code>。而这 <code>something</code> 就是键对应的值。</p>

<p>{{
findKey :: (Eq k) =&gt; k -&gt; [(k,v)] -&gt; Maybe v 
findKey key [] = Nothing
findKey key ((k,v):xs) = 
     if key == k then 
         Just v 
     else 
         findKey key xs
}}</p>

<p>看这类型声明，它取一个可判断相等性的键和一个关联列表做参数，可能 (Maybe) 得到一个值。听起来不错.这便是个标准的处理 List 的递归函数，边界条件，分割 List，递归调用，都有了 -- 经典的 <code>fold</code> 模式。
看看用 <code>fold</code> 怎样实现吧。</p>

<p>{{
findKey :: (Eq k) =&gt; k -&gt; [(k,v)] -&gt; Maybe v 
findKey key = foldr ((k,v) acc -&gt; if key == k then Just v else acc) Nothing
}}</p>

<pre><code>*Note*: 通常，使用 ``fold`` 来替代类似的递归函数会更好些。用 ``fold`` 的代码让人一目了然，而看明白递归则得多花点脑子。
</code></pre>

<p>{{
ghci&gt; findKey &quot;penny&quot; phoneBook 
Just &quot;853-2492&quot; 
ghci&gt; findKey &quot;betty&quot; phoneBook 
Just &quot;555-2938&quot; 
ghci&gt; findKey &quot;wilma&quot; phoneBook 
Nothing
}}</p>

<p>如魔咒般灵验! 只要我们有这姑娘的号码就 <code>Just</code> 可以得到，否则就是 <code>Nothing</code>. 方才我们实现的函数便是 <code>Data.List</code> 模块的 <code>lookup</code>，如果要按键去寻找相应的值，它就必须得遍历整个 List，直到找到为止。而 <code>Data.Map</code> 模块提供了更高效的方式(通过树实现)，并提供了一组好用的函数。从现在开始，我们扔掉关联列表，改用map.由于<code>Data.Map</code>中的一些函数与Prelude和<code>Data.List</code> 模块存在命名冲突，所以我们使用 <code>qualified import</code>。<code>import qualified Data.Map as Map</code> 在代码中加上这句，并 <code>load</code> 到 ghci 中.继续前进，看看 <code>Data.Map</code> 是如何的一座宝库! 
如下便是其中函数的一瞥:</p>

<p><strong>fromList</strong> 取一个关联列表，返回一个与之等价的 Map。</p>

<p>{{
ghci&gt; Map.fromList [(&quot;betty&quot;,&quot;555-2938&quot;),(&quot;bonnie&quot;,&quot;452-2928&quot;),(&quot;lucille&quot;,&quot;205-2928&quot;)] 
fromList [(&quot;betty&quot;,&quot;555-2938&quot;),(&quot;bonnie&quot;,&quot;452-2928&quot;),(&quot;lucille&quot;,&quot;205-2928&quot;)] 
ghci&gt; Map.fromList [(1,2),(3,4),(3,2),(5,5)] 
fromList [(1,2),(3,2),(5,5)]
}}</p>

<p>若其中存在重复的键,就将其忽略。如下即 <code>fromList</code> 的类型声明。</p>

<p>{{
Map.fromList :: (Ord k) =&gt; [(k，v)] -&gt; Map.Map k v
}}</p>

<p>这表示它取一组键值对的 List，并返回一个将 <code>k</code> 映射为 <code>v</code> 的 <code>map</code>。注意一下，当使用普通的关联列表时，只需要键的可判断相等性就行了。而在这里，它还必须得是可排序的。这在 <code>Data.Map</code> 模块中是强制的。因为它会按照某顺序将其组织在一棵树中.在处理键值对时，只要键的类型属于 <code>Ord</code> 类型类，就应该尽量使用<code>Data.Map</code>.<code>empty</code> 返回一个空 <code>map</code>.</p>

<p>{{
ghci&gt; Map.empty 
fromList []
 }}</p>

<p><strong>insert</strong> 取一个键，一个值和一个 <code>map</code> 做参数，给这个 <code>map</code> 插入新的键值对，并返回一个新的 <code>map</code>。</p>

<p>{{
ghci&gt; Map.empty 
fromList [] 
ghci&gt; Map.insert 3 100 Map.empty
fromList [(3,100)] 
ghci&gt; Map.insert 5 600 (Map.insert 4 200 ( Map.insert 3 100  Map.empty)) 
fromList [(3,100),(4,200),(5,600)]
ghci&gt; Map.insert 5 600 . Map.insert 4 200 . Map.insert 3 100 $ Map.empty 
fromList [(3,100),(4,200),(5,600)]
}}</p>

<p>通过 <code>empty</code>，<code>insert</code> 与 <code>fold</code>，我们可以编写出自己的 <code>fromList</code>。</p>

<p>{{
fromList&#39; :: (Ord k) =&gt; [(k,v)] -&gt; Map.Map k v 
fromList&#39; = foldr ((k,v) acc -&gt; Map.insert k v acc) Map.empty
}}</p>

<p>简洁明了的 <code>fold</code>！ 从一个空的 <code>map</code> 开始，然后从右折叠，随着遍历不断地往 <code>map</code> 中插入新的键值对.</p>

<p><strong>null</strong> 检查一个 <code>map</code> 是否为空.</p>

<p>{{
ghci&gt; Map.null Map.empty 
True 
ghci&gt; Map.null $ Map.fromList [(2,3),(5,5)] 
False
}}</p>

<p><strong>size</strong> 返回一个 <code>map</code> 的大小。</p>

<p>{{
ghci&gt; Map.size Map.empty 
0 
ghci&gt; Map.size $ Map.fromList [(2,4),(3,3),(4,2),(5,4),(6,4)] 
5
}}</p>

<p><strong>singleton</strong> 取一个键值对做参数,并返回一个只含有一个映射的 <code>map</code>.</p>

<p>{{
ghci&gt; Map.singleton 3 9 
fromList [(3,9)] 
ghci&gt; Map.insert 5 9 $ Map.singleton 3 9 
fromList [(3,9),(5,9)]
}}</p>

<p><strong>lookup</strong> 与 <code>Data.List</code> 的 <code>lookup</code> 很像,只是它的作用对象是 <code>map</code>，如果它找到键对应的值。就返回 <code>Just something</code>，否则返回 <code>Nothing</code>。</p>

<p><strong>member</strong> 是个判断函数，它取一个键与 <code>map</code> 做参数，并返回该键是否存在于该 <code>map</code>。</p>

<p>{{
ghci&gt; Map.member 3 $ Map.fromList [(3,6),(4,3),(6,9)] 
True 
ghci&gt; Map.member 3 $ Map.fromList [(2,5),(4,5)] 
False
}}</p>

<p><strong>map</strong> 与 <strong>filter</strong> 与其对应的 <code>List</code> 版本很相似: </p>

<p>{{
ghci&gt; Map.map (*100) $ Map.fromList [(1,1),(2,4),(3,9)] 
fromList [(1,100),(2,400),(3,900)] 
ghci&gt; Map.filter isUpper $ Map.fromList [(1,&#39;a&#39;),(2,&#39;A&#39;),(3,&#39;b&#39;),(4,&#39;B&#39;)] 
fromList [(2,&#39;A&#39;),(4,&#39;B&#39;)]
}}</p>

<p><code>toList</code> 是 <code>fromList</code> 的反函数。</p>

<p>{{
ghci&gt; Map.toList . Map.insert 9 2 $ Map.singleton 4 3 
[(4,3),(9,2)]
}}</p>

<p><strong>keys</strong> 与 <strong>elems</strong> 各自返回一组由键或值组成的 List，<code>keys</code> 与 <code>map fst . Map.toList</code> 等价，<code>elems</code> 与 <code>map snd . Map.toList</code>等价. <code>fromListWith</code> 是个很酷的小函数，它与 <code>fromList</code> 很像，只是它不会直接忽略掉重复键，而是交给一个函数来处理它们。假设一个姑娘可以有多个号码，而我们有个像这样的关联列表: </p>

<p>{{
phoneBook =<br>
    [(&quot;betty&quot;,&quot;555-2938&quot;)<br>
    ,(&quot;betty&quot;,&quot;342-2492&quot;)<br>
    ,(&quot;bonnie&quot;,&quot;452-2928&quot;)<br>
    ,(&quot;patsy&quot;,&quot;493-2928&quot;)<br>
    ,(&quot;patsy&quot;,&quot;943-2929&quot;)<br>
    ,(&quot;patsy&quot;,&quot;827-9162&quot;)<br>
    ,(&quot;lucille&quot;,&quot;205-2928&quot;)<br>
    ,(&quot;wendy&quot;,&quot;939-8282&quot;)<br>
    ,(&quot;penny&quot;,&quot;853-2492&quot;)<br>
    ,(&quot;penny&quot;,&quot;555-2111&quot;)<br>
    ]<br>
}}</p>

<p>如果用 <code>fromList</code> 来生成 <code>map</code>，我们会丢掉许多号码! 如下才是正确的做法: </p>

<p>{{
phoneBookToMap :: (Ord k) =&gt; [(k, String)] -&gt; Map.Map k String<br>
phoneBookToMap xs = Map.fromListWith (\number1 number2 -&gt; number1 ++ &quot;, &quot; ++ number2) xs<br>
}}</p>

<p>{{
ghci&gt; Map.lookup &quot;patsy&quot; $ phoneBookToMap phoneBook 
&quot;827-9162, 943-2929, 493-2928&quot; 
ghci&gt; Map.lookup &quot;wendy&quot; $ phoneBookToMap phoneBook
&quot;939-8282&quot; 
ghci&gt; Map.lookup &quot;betty&quot; $ phoneBookToMap phoneBook 
&quot;342-2492，555-2938&quot;
}}</p>

<p>一旦出现重复键，这个函数会将不同的值组在一起，同样，也可以缺省地将每个值放到一个单元素的 List 中，再用 <code>++</code> 将他们都连接在一起。</p>

<p>{{
phoneBookToMap :: (Ord k) =&gt; [(k，a)] -&gt; Map.Map k [a] 
phoneBookToMap xs = Map.fromListWith (++) $ map ((k,v) -&gt; (k,[v])) xs 
ghci&gt; Map.lookup &quot;patsy&quot; $ phoneBookToMap phoneBook 
[&quot;827-9162&quot;,&quot;943-2929&quot;,&quot;493-2928&quot;]
}}</p>

<p>很简洁! 它还有别的玩法，例如在遇到重复元素时，单选最大的那个值.</p>

<p>{{
ghci&gt; Map.fromListWith max [(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)] 
fromList [(2,100),(3,29),(4,22)]
}}</p>

<p>或是将相同键的值都加在一起.</p>

<p>{{
ghci&gt; Map.fromListWith (+) [(2,3),(2,5),(2,100),(3,29),(3,22),(3,11),(4,22),(4,15)] 
fromList [(2,108),(3,62),(4,37)]
}}</p>

<p><strong>insertWith</strong> 之于 <code>insert</code>，恰如 <code>fromListWith</code> 之于 <code>fromList</code>。它会将一个键值对插入一个 <code>map</code> 之中，而该 <code>map</code> 若已经包含这个键，就问问这个函数该怎么办。</p>

<p>{{
ghci&gt; Map.insertWith (+) 3 100 $ Map.fromList [(3,4),(5,103),(6,339)] 
fromList [(3,104),(5,103),(6,339)]
}}</p>

<p><code>Data.Map</code> 里面还有不少函数，[http://www.haskell.org/ghc/docs/latest/html/libraries/containers/Data-Map.html 这个文档]中的列表就很全了.</p>

<p>== Data.Set</p>

<p>[$../img/legosets.png]</p>

<p><code>Data.Set</code> 模块提供了对数学中集合的处理。集合既像 List 也像 <code>Map</code>: 它里面的每个元素都是唯一的，且内部的数据由一棵树来组织(这和 <code>Data.Map</code> 模块的 <code>map</code> 很像)，必须得是可排序的。同样是插入,删除,判断从属关系之类的操作，使用集合要比 List 快得多。对一个集合而言，最常见的操作莫过于并集，判断从属或是将集合转为 List.</p>

<p>由于 <code>Data.Set</code> 模块与 <code>Prelude</code> 模块和 <code>Data.List</code> 模块中存在大量的命名冲突，所以我们使用 <code>qualified import</code></p>

<p>将 <code>import</code> 语句至于代码之中:</p>

<p>{{
import qualified Data.Set as Set<br>
}}</p>

<p>然后在 ghci 中装载</p>

<p>假定我们有两个字串，要找出同时存在于两个字串的字符</p>

<p>{{
text1 = &quot;I just had an anime dream. Anime... Reality... Are they so different?&quot;<br>
text2 = &quot;The old man left his garbage can out and now his trash is all over my lawn!&quot;<br>
}}</p>

<p><strong>fromList</strong> 函数同你想的一样，它取一个 List 作参数并将其转为一个集合  </p>

<p>{{
ghci&gt; let set1 = Set.fromList text1<br>
ghci&gt; let set2 = Set.fromList text2<br>
ghci&gt; set1<br>
fromList &quot; .?AIRadefhijlmnorstuy&quot;<br>
ghci&gt; set2<br>
fromList &quot; !Tabcdefghilmnorstuvwy&quot; 
}}</p>

<p>如你所见，所有的元素都被排了序。而且每个元素都是唯一的。现在我们取它的交集看看它们共同包含的元素:</p>

<p>{{
ghci&gt; Set.intersection set1 set2<br>
fromList &quot; adefhilmnorstuy&quot;<br>
}}</p>

<p>使用 <code>difference</code> 函数可以得到存在于第一个集合但不在第二个集合的元素  </p>

<p>{{
ghci&gt; Set.difference set1 set2<br>
fromList &quot;.?AIRj&quot;<br>
ghci&gt; Set.difference set2 set1<br>
fromList &quot;!Tbcgvw&quot;<br>
}}</p>

<p>也可以使用 <code>union</code> 得到两个集合的并集  </p>

<p>{{
ghci&gt; Set.union set1 set2<br>
fromList &quot; !.?AIRTabcdefghijlmnorstuvwy&quot;<br>
}}</p>

<p><code>null</code>，<code>size</code>，<code>member</code>，<code>empty</code>，<code>singleton</code>，<code>insert</code>，<code>delete</code> 这几个函数就跟你想的差不多啦  </p>

<p>{{
ghci&gt; Set.null Set.empty<br>
True<br>
ghci&gt; Set.null $ Set.fromList [3,4,5,5,4,3]<br>
False<br>
ghci&gt; Set.size $ Set.fromList [3,4,5,3,4,5]<br>
3<br>
ghci&gt; Set.singleton 9<br>
fromList [9]<br>
ghci&gt; Set.insert 4 $ Set.fromList [9,3,8,1]<br>
fromList [1,3,4,8,9]<br>
ghci&gt; Set.insert 8 $ Set.fromList [5..10]<br>
fromList [5,6,7,8,9,10]<br>
ghci&gt; Set.delete 4 $ Set.fromList [3,4,5,4,3,4,5]<br>
fromList [3,5]<br>
}}</p>

<p>也可以判断子集与真子集，如果集合 A 中的元素都属于集合 B，那么 A 就是 B 的子集, 如果 A 中的元素都属于 B 且 B 的元素比 A 多，那 A 就是 B 的真子集  </p>

<p>{{
ghci&gt; Set.fromList [2,3,4] <code>Set.isSubsetOf</code> Set.fromList [1,2,3,4,5]<br>
True<br>
ghci&gt; Set.fromList [1,2,3,4,5] <code>Set.isSubsetOf</code> Set.fromList [1,2,3,4,5]<br>
True<br>
ghci&gt; Set.fromList [1,2,3,4,5] <code>Set.isProperSubsetOf</code> Set.fromList [1,2,3,4,5]<br>
False<br>
ghci&gt; Set.fromList [2,3,4,8] <code>Set.isSubsetOf</code> Set.fromList [1,2,3,4,5]<br>
False<br>
}}</p>

<p>对集合也可以执行 <code>map</code> 和 <code>filter</code>:</p>

<p>{{
ghci&gt; Set.filter odd $ Set.fromList [3,4,5,6,7,2,3,4]<br>
fromList [3,5,7]<br>
ghci&gt; Set.map (+1) $ Set.fromList [3,4,5,6,7,2,3,4]<br>
fromList [3,4,5,6,7,8]<br>
}}</p>

<p>集合有一常见用途，那就是先 <code>fromList</code> 删掉重复元素后再 <code>toList</code> 转回去。尽管 <code>Data.List</code> 模块的 <code>nub</code> 函数完全可以完成这一工作，但在对付大 List 时则会明显的力不从心。使用集合则会快很多，<code>nub</code> 函数只需 List 中的元素属于 <code>Eq</code> 类型类就行了，而若要使用集合，它必须得属于 <code>Ord</code> 类型类  </p>

<p>{{
ghci&gt; let setNub xs = Set.toList $ Set.fromList xs<br>
ghci&gt; setNub &quot;HEY WHATS CRACKALACKIN&quot;<br>
&quot; ACEHIKLNRSTWY&quot;<br>
ghci&gt; nub &quot;HEY WHATS CRACKALACKIN&quot;<br>
&quot;HEY WATSCRKLIN&quot;
}}</p>

<p>在处理较大的 List 时，<code>setNub</code> 要比 <code>nub</code> 快，但也可以从中看出，<code>nub</code> 保留了 List 中元素的原有顺序，而 <code>setNub</code> 不。</p>

<p>== 建立自己的模块</p>

<p>我们已经见识过了几个很酷的模块，但怎样才能构造自己的模块呢? 几乎所有的编程语言都允许你将代码分成多个文件，Haskell 也不例外。在编程时，将功能相近的函数和类型至于同一模块中会是个很好的习惯。这样一来，你就可以轻松地一个 <code>import</code> 来重用其中的函数.</p>

<p>接下来我们将构造一个由计算机几何图形体积和面积组成的模块，先从新建一个 <code>Geometry.hs</code> 的文件开始.</p>

<p>在模块的开头定义模块的名称，如果文件名叫做 <code>Geometry.hs</code> 那它的名字就得是 <code>Geometry</code>。在声明出它含有的函数名之后就可以编写函数的实现啦，就这样写:</p>

<p>{{
module Geometry<br>
( sphereVolume<br>
，sphereArea<br>
，cubeVolume<br>
，cubeArea<br>
，cuboidArea<br>
，cuboidVolume<br>
) where<br>
}}</p>

<p>如你所见，我们提供了对球体,立方体和立方体的面积和体积的解法。继续进发，定义函数体:</p>

<p>{{
module Geometry<br>
( sphereVolume<br>
，sphereArea<br>
，cubeVolume<br>
，cubeArea<br>
，cuboidArea<br>
，cuboidVolume<br>
) where  </p>

<p>sphereVolume :: Float -&gt; Float<br>
sphereVolume radius = (4.0 / 3.0) * pi * (radius ^ 3)  </p>

<p>sphereArea :: Float -&gt; Float<br>
sphereArea radius = 4 * pi * (radius ^ 2)  </p>

<p>cubeVolume :: Float -&gt; Float<br>
cubeVolume side = cuboidVolume side side side  </p>

<p>cubeArea :: Float -&gt; Float<br>
cubeArea side = cuboidArea side side side  </p>

<p>cuboidVolume :: Float -&gt; Float -&gt; Float -&gt; Float<br>
cuboidVolume a b c = rectangleArea a b * c  </p>

<p>cuboidArea :: Float -&gt; Float -&gt; Float -&gt; Float<br>
cuboidArea a b c = rectangleArea a b * 2 + rectangleArea a c * 2 + rectangleArea c b * 2  </p>

<p>rectangleArea :: Float -&gt; Float -&gt; Float<br>
rectangleArea a b = a * b<br>
}}</p>

<p>[$../img/making_modules.png]</p>

<p>标准的几何公式。有几个地方需要注意一下，由于立方体只是长方体的特殊形式，所以在求它面积和体积的时候我们就将它当作是边长相等的长方体。在这里还定义了一个 <code>helper</code>函数，<code>rectangleArea</code> 它可以通过长方体的两条边计算出长方体的面积。它仅仅是简单的相乘而已，份量不大。但请注意我们可以在这一模块中调用这个函数，而它不会被导出! 因为我们这个模块只与三维图形打交道.</p>

<p>当构造一个模块的时候，我们通常只会导出那些行为相近的函数，而其内部的实现则是隐蔽的。如果有人用到了 <code>Geometry</code> 模块，就不需要关心它的内部实现是如何。我们作为编写者，完全可以随意修改这些函数甚至将其删掉，没有人会注意到里面的变动，因为我们并不把它们导出.</p>

<p>要使用我们的模块，只需:</p>

<p>{{
import Geometry<br>
}}</p>

<p>将 <code>Geometry.hs</code> 文件至于用到它的进程文件的同一目录之下.</p>

<p>模块也可以按照分层的结构来组织，每个模块都可以含有多个子模块。而子模块还可以有自己的子模块。我们可以把 <code>Geometry</code> 分成三个子模块，而一个模块对应各自的图形对象.</p>

<p>首先，建立一个 <code>Geometry</code> 文件夹，注意首字母要大写，在里面新建三个文件</p>

<p>如下就是各个文件的内容:</p>

<p>sphere.hs</p>

<p>{{
module Geometry.Sphere<br>
( volume<br>
，area<br>
) where  </p>

<p>volume :: Float -&gt; Float<br>
volume radius = (4.0 / 3.0) * pi * (radius ^ 3)  </p>

<p>area :: Float -&gt; Float<br>
area radius = 4 * pi * (radius ^ 2)<br>
}}</p>

<p>cuboid.hs</p>

<p>{{
module Geometry.Cuboid<br>
( volume<br>
，area<br>
) where  </p>

<p>volume :: Float -&gt; Float -&gt; Float -&gt; Float<br>
volume a b c = rectangleArea a b * c  </p>

<p>area :: Float -&gt; Float -&gt; Float -&gt; Float<br>
area a b c = rectangleArea a b * 2 + rectangleArea a c * 2 + rectangleArea c b * 2  </p>

<p>rectangleArea :: Float -&gt; Float -&gt; Float<br>
rectangleArea a b = a * b  </p>

<p>}}</p>

<p>cube.hs</p>

<p>{{
module Geometry.Cube<br>
( volume<br>
，area<br>
) where  </p>

<p>import qualified Geometry.Cuboid as Cuboid  </p>

<p>volume :: Float -&gt; Float<br>
volume side = Cuboid.volume side side side  </p>

<p>area :: Float -&gt; Float<br>
area side = Cuboid.area side side side<br>
}}</p>

<p>好的! 先是 <code>Geometry.Sphere</code>。注意，我们将它置于 <code>Geometry</code> 文件夹之中并将它的名字定为 <code>Geometry.Sphere</code>。对 Cuboid 也是同样，也注意下，在三个模块中我们定义了许多名称相同的函数，因为所在模块不同，所以不会产生命名冲突。若要在 <code>Geometry.Cube</code> 使用 <code>Geometry.Cuboid</code> 中的函数，就不能直接 <code>import Geometry.Cuboid</code>，而必须得 <code>qualified import</code>。因为它们中间的函数名完全相同.</p>

<p>{{
import Geometry.Sphere<br>
}}</p>

<p>然后，调用 <code>area</code> 和 <code>volume</code>，就可以得到球体的面积和体积，而若要用到两个或更多此类模块，就必须得 <code>qualified import</code> 来避免重名。所以就得这样写:</p>

<p>{{
import qualified Geometry.Sphere as Sphere<br>
import qualified Geometry.Cuboid as Cuboid<br>
import qualified Geometry.Cube as Cube<br>
}}</p>

<p>然后就可以调用 <code>Sphere.area</code>，<code>Sphere.volume</code>，<code>Cuboid.area</code> 了，而每个函数都只计算其对应物体的面积和体积.</p>

<p>以后你若发现自己的代码体积庞大且函数众多，就应该试着找找目的相近的函数能否装入各自的模块，也方便日后的重用.</p>
