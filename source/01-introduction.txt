=簡介  #introduction

==關於這個教程

歡迎來到*haskell趣學指南*！閲讀此文表明你正要學haskell。很好，來對地方了，先容我簡單介紹一下這個教程。

編寫這個教程,一方面是為了鞏固我自己對haskell的理解，另一方面也是希望能夠分享我的經驗，給初學者提供一定幫助。網上現有的haskell教程已經汗牛充棟，在我學習的時候就曾參閲過許多教程與文章，它們講解問題的思路各不相同，綜合的閲讀使得我最終能夠整理起知識的碎片並正確地理解。所以說，編寫這個教程也是創造另一個學習資源的嘗試，給讀者增加一個選擇的餘地。

[^img/bird.png]

本教程主要是面向已經有命令式編程經驗(C, C++, Java, Python …) 、卻未曾接觸過函數式編程 (Haskell, ML, OCaml …)的讀者。還沒有編程基礎？沒關係，像你這樣的聰明小伙一定能夠學會haskell！

若在學習中遇到什麼地方不明白，freenode上的#haskell頻道是提問的絶佳去處。那兒的人們友善，耐心且照顧新人。

在我掌握haskell之前的學習曾經失敗過兩次，它看起來太不可思議，難以理解。不過隨後突然靈光一閃，馬上就開竅了，往後的學習也就變得遊刃有餘。我想說的就是：haskell很棒，如果你喜歡編程，那就得好好學學--儘管在咋一看它可能會顯得很彆扭--它迫使你換個腦筋思考，很有趣！

好，下一節。。。

==那麼，haskell是啥？

[$img/fx.png]

haskell是一門*純函數式編程語言*。在命令式語言中執行操作需要給電腦安排一組命令，隨着命令的執行，狀態就會隨之發生改變。例如你給變數a賦值為5，而隨後做了其它一些事情之後a就可能變成的其它值。有控制流程，你就可以重複執行操作。然而在函數式編程語言中，你不是像命令式語言那樣命令電腦“要做什麼”，而是通過用函數來描述出問題“是什麼”，如“_階乘是指從1到某數間所有數字的乘積_”。變數一旦賦值，就不可以更改了，你已經說了a就是5，就不能再另說a是別的什麼數。做人不能食言，對不？所以說，函數式編程語言中的函數能做的唯一事情就是求值，因而沒有副作用。一開始會覺得這很受限，不過好處也正源於此：若以同樣的參數調用同一函數兩次，得到的結果總是相同。這被稱作“_引用透明_”。如此一來編譯器就可以理解程序的行為，你也很容易就能驗證一個函數的正確性，繼而可以將一些簡單的函數組合成更複雜的函數。

[^img/lazy.png]

haskell是*惰性*的。也就是說若非特殊指明，函數在真正需要結果以前不會被求值。再加上引用透明，你就可以把程序僅看作是數據的一系列變形。如此一來就有了很多有趣的特性，如無限長度的資料結構。假設你有一個List: ``xs = [1,2,3,4,5,6,7,8]``，還有一個函數``doubleMe``，它可以將一個List中的所有元素都乘以二，返回一個新的List。若是在命令式語言中，把一個List乘以8，執行``doubleMe(doubleMe(doubleMe(xs)))``，得遍歷三遍xs才會得到結果。而在惰性語言中，調用doubleMe時並不會立即求值，它會說“嗯嗯，待會兒再做！”。不過一旦要看結果，第一個doubleMe就會對第二個說“給我結果，快！”第二個doubleMe就會把同樣的話傳給第三個doubleMe，第三個doubleMe只能將1乘以2得2後交給第二個，第二個再乘以2得4交給第一個，最終得到第一個元素8。也就是說，這一切只需要遍歷一次list即可，而且僅在你真正需要結果時才會執行。惰性語言中的計算只是一組初始數據和變換公式。

[$img/boat.png]

haskell 是*靜態類型*的。當你編譯程序時，編譯器需要明確哪個是數字，哪個是字元串。這就意味着很大一部分錯誤都可以在編譯時被發現，若試圖將一個數字和字元串相加，編譯器就會報錯。haskell擁有一套強大的類型系統，支持自動類型推導。這一來你就不需要在每段代碼上都標明它的類型，像計算a=5+4，你就不需另告訴編譯器“a是一個數值”，它可以自己推導出來。類型推導可以讓你的程序更加簡練。假設有個二元函數是將兩個數值相加，你就無需聲明其類型，這個函數可以對一切可以相加的值進行計算。

haskell採納了很多高級概念，因而它的代碼*優雅且簡練*。與同層次的命令式語言相比，haskell的代碼往往會更短，更短就意味着更容易理解，bug也就更少。

haskell的研發工作始於1987年，當時是一個學會的精英分子（很多PhD哦）聚到一塊兒，商量着要設計一門牛X的語言。03年，《 Haskell Report 》發佈，標志著穩定版本的最終確定。

== 你需要...

一個編輯器和一個編譯器。你可能已經安裝了最喜歡的編輯器，在此不加贅述。如今最常用的haskell編譯器是GHC和hugs，在本教程中我們將使用ghc。安裝的細節就不消多說了，在windows下只要下載一個installer然後一路next最後重啟一下（貌似不需要重啟，譯者注）即可；在基于debain的linux系統下一個``apt-get install ghc6 libghc6-mtl-dev``看著玩就是了；我沒mac電腦，不過聽說你如果安裝了macPort，就可以通過 ``sudo port install ghc``來獲得ghc。嗯，應該可以用那古怪的單鍵滑鼠搞haskell吧，我拿不準。

GHC既可以解釋執行haskell腳本（通常是以.hs作為尾碼），也可以編譯。它還有個交互模式，你可以在裡面調用腳本裡定義的函數，即時得到結果。 對於學習而言，這可比每次修改都編譯執行要方便的多。想進入交互模式，只要打開控制台輸入ghci即可。假設你在myfunctions.hs裡定義了一些函數，在ghci中輸入``:l myfunctions.hs``}載後就可以調用了。一旦修改了這個.hs檔案的內容，再次執行``:l myfunctions.hs``或者與之等價的:r，都可以重新裝載該檔案。我本人通常就是在.hs檔案中定義幾個函數，再到ghci裝載，調試，再修改再裝載。這也正是我們往後的基本流程。
