=再來看看更多Monad #for-a-few-monads-more
我們已經看過Monad是如何接受具有context的值，並如何用函數操作他們。
還有如何用``>>=``跟``do``來減輕我們對context的關注，集中精神在value本身。

我們也看過了``Maybe``是如何把值加上一個可能會失敗的context。
我們學習到List Monad是如何加進多重結果的context。
我們也了解``IO`` Monad如何運作，而且我們在知道什麼是Monad之前就已經知道他了。

在這個章節，我們會介紹一些其他的Monad。
他們可以把值變成monadiv value，因此可以讓我們的程式更簡潔清晰。
多見識幾個Monad也可以敏銳我們對Monad的直覺。

我們即將要介紹的Monad都包含在``mtl``這個套建中。
一個Haskell package包含了一堆模組。
而``mtl``已經包含在Haskell Platform中，所以你可能不用另外安裝。
要檢查你有沒有這套件，你可以下``ghc-pkg list``。
這會列出你已經安裝的套件，其中應該包含``mtl``後面接著對應的版號。


==你所不知道的Writer Monad
我們已經看過``Maybe``, list以及``IO`` Monad。
現在我們要來看看``Writer`` Monad。

相對於``Maybe``是加入可能失敗的context，list是加入non-deterministic的context，
``Writer``則是加進一個附加值的context，好比log一般。
``Writer``可以讓我們在計算的同時蒐集所有log紀錄，並匯集成一個log並附加在結果上。

例如我們想要附加一個String好說明我們的值在幹麼（有可能是為了除錯）。
想像有一個函數接受一個代表幫派人數的數字，然後會回傳值告訴我們這是否算是一個龐大的幫派：

{{
isBigGang :: Int -> Bool  
isBigGang x = x > 9  
}}

現在我們希望他不只是回傳``True``或``False``，我們還希望他能夠多回傳一個字串代表log。
這很容易，只要多加一個``String``在``Bool``旁邊就好了。

{{
isBigGang :: Int -> (Bool, String)  
isBigGang x = (x > 9, "Compared gang size to 9.")  
}}

我們現在回傳了一個Tuple，第一個元素是原來的布林值，第二個元素是一個String。
現在我們的值有了一個context。

{{
ghci> isBigGang 3  
(False,"Compared gang size to 9.")  
ghci> isBigGang 30  
(True,"Compared gang size to 9.")  
}}

到目前為止都還不錯，``isBigGang``回傳一個值跟他的context。
對於正常的數值來說這樣的寫法都能運作良好。
但如果我們想要把一個已經具有context的值，像是``(3, "Smallish gang.")``，餵給``isBigGang``呢？
我們又面對了同樣的問題：
如果我們有一個能接受正常數值並回傳一個具有context值的function，
那我們要如何餵給他一個具有context的值？

當我們在研究``Maybe`` monad的時候，我們寫了一個``applyMaybe``。
他接受一個``Maybe a``值跟一個``a -> Maybe b``型態的函數，
他會把``Maybe a``餵給這個function，即便這個function其實是接受``a``而非``Maybe a``。
``applyMaybe``有針對這樣的context做處裡，也就是會留意有可能發生的失敗情況。
但在``a -> Maybe b``裡面，我們可以只專心處裡正常數值即可。
因為``applyMaybe`` (之後變成了``>>=``)會幫我們處裡需要檢查``Nothing``或``Just``的情況。

我們再來寫一個接受附加log值的函數，
也就是``(a, String)``型態的值跟``a -> (b, String)``型態的函數。
我們稱呼這個函數為``applyLog``。
這個函數有的context是附加log值，而不是一個可能會失敗的context，
因此``applyLog``會確保原有的log被保留，並附上從函數產生出的新的log。
這邊我們來看一下實做：

{{
applyLog :: (a,String) -> (a -> (b,String)) -> (b,String)  
applyLog (x,log) f = let (y,newLog) = f x in (y,log ++ newLog)  
}}

當我們想把一個具有context的值餵給一個函數的時候，
我們會嘗試把值跟他的context分開，然後把值餵給函數再重新接回context。
在``Maybe`` monad的情況，我們檢查值是否為``Just x``，如果是，便將``x``餵給函數。
而在log的情況，我們知道pair的其中一個component是log而另一個是值。
所以我們先取出值``x``，將``f`` apply到``x``，便獲取``(y,newLog)``，
其中``y``是新的值而``newLog``則是新的log。
但如果我們回傳``newLog``，舊的log便不會包含進去，
所以我們要回傳的是``(y, log ++ newLog)``。
我們用``++``來把新的log接到舊的上面。

來看看``applyLog``運作的情形：

{{
ghci> (3, "Smallish gang.") `applyLog` isBigGang  
(False,"Smallish gang.Compared gang size to 9")  
ghci> (30, "A freaking platoon.") `applyLog` isBigGang  
(True,"A freaking platoon.Compared gang size to 9")  
}}

跟之前的結果很像，只差在我們多了伴隨產生的log。
再來多看幾個例子：

{{
ghci> ("Tobin","Got outlaw name.") `applyLog` (\x -> (length x, "Applied length."))  
(5,"Got outlaw name.Applied length.")  
ghci> ("Bathcat","Got outlaw name.") `applyLog` (\x -> (length x, "Applied length"))  
(7,"Got outlaw name.Applied length")  
}}

可以看到在lambda裡面``x``只是個正常的字串而不是tuple，且``applyLog``幫我們處裡掉附加log的動作。

*Monoids的好處*

    請確定你了解什麼是Monoids。

到目前為止``applyLog``接受``(a,String)``型態的值，
但為什麼log一定要是``String``呢？
我們使用``++``來附加新的log，
難道``++``並不能運作在任何形式的list，而一定要限制我們在``String``上呢？
我們當然可以擺脫``String``，
我們可以如下改變他的型態：

{{
applyLog :: (a,[c]) -> (a -> (b,[c])) -> (b,[c])      
}}

我們用一個List來代表Log。
包含在List中的元素型態必須跟原有的List跟回傳的List型態相同，
否則我們沒辦法用``++``來把他們接起來。

這能夠運作在bytestring上嗎？絕對沒問題。
只是我們現在的型態只對List有效。
我們必須要另外做一個bytestring版本的``applyLog``。
但我們注意到List跟bytestring都是monoids。
因此他們都是``Monoid`` type class的instance，
那代表他們都有實做``mappend``。
對List以及bytestring而言，``mappend``都是拿來串接的。

{{
ghci> [1,2,3] `mappend` [4,5,6]  
[1,2,3,4,5,6]  
ghci> B.pack [99,104,105] `mappend` B.pack [104,117,97,104,117,97]  
Chunk "chi" (Chunk "huahua" Empty)  
}}

修改後我們的``applyLog``可以運作在任何monoid上。
我們必須要修改型態宣告來表示這件事，同時也要在實做中把``++``改成``mappend``：

{{
applyLog :: (Monoid m) => (a,m) -> (a -> (b,m)) -> (b,m)  
applyLog (x,log) f = let (y,newLog) = f x in (y,log `mappend` newLog)  
}}

由於現在包含的值可以是任何monoid，
我們不再需要把tuple想成包含一個值跟對應的log，
我們可以想成他包含一個值跟一個對應的monoid。
舉例來說，
可以說我們有一個tuple包含一個產品名稱跟一個符合monoid特性的產品價格。
我們可以定義一個``Sum``的newtype來保證我們在操作產品的時候也會把價錢跟著加起來。

{{
import Data.Monoid  
  
type Food = String  
type Price = Sum Int  

addDrink :: Food -> (Food,Price)  
addDrink "beans" = ("milk", Sum 25)  
addDrink "jerky" = ("whiskey", Sum 99)  
addDrink _ = ("beer", Sum 30)  
}}

我們用string來代表食物，用``newtype``重新定義``nInt``為``Sum``，
來追蹤總共需要花多少錢。
可以注意到我們用``mappend``來操作``Sum``的時候，價錢會被一起加起來。

{{
ghci> Sum 3 `mappend` Sum 9  
Sum {getSum = 12}  
}}

``addDrink``的實做很簡單，
如果我們想吃豆子，他會回傳``"milk"``以及伴隨的``Sum 25``，
同樣的如果我們要吃"jerky"，他就會回傳"whiskey"，
要吃其他東西的話，就會回傳"beer"。
乍看之下這個函數沒什麼特別，
但如果用``applyLog``的話就會有趣些。

{{
ghci> ("beans", Sum 10) `applyLog` addDrink  
("milk",Sum {getSum = 35})  
ghci> ("jerky", Sum 25) `applyLog` addDrink  
("whiskey",Sum {getSum = 124})  
ghci> ("dogmeat", Sum 5) `applyLog` addDrink  
("beer",Sum {getSum = 35})  
}}

牛奶價值``25``美分，但如果我們也吃了價值``10``美分的豆子的話，
總共需要付``35``美分。
這樣很清楚地展示了伴隨的值不一定需要是log，他可以是任何monoid。
至於兩個值要如何結合，那要看monoid中怎麼定義。
當我們需要的是log的時候，他們是串接，
但這個case裡面，數字是被加起來。

由於``addDrink``回傳一個``(Food,Price)``，
我們可以再把結果重新餵給``addDrink``，
這可以很容易告訴我們總共喝了多少錢：

{{
ghci> ("dogmeat", Sum 5) `applyLog` addDrink `applyLog` addDrink  
("beer",Sum {getSum = 65})  
}}

將狗食跟30美分的啤酒加在一起會得到``("beer", Sum 35)``。
如果我們用``applyLog``將上面的結果再餵給``addDrink``，
我們會得到``("beer", Sum 65)``這樣的結果。


==Reader Monad

==State Monad

==Error Monad

==一些實用的Moandic functions

==定義自己的Monad
