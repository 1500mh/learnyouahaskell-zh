=函數式地思考來解決問題 #functionally-solving-problems

在這一章中，我們會檢視幾個有趣的問題，並嘗試用函數式的方式來漂亮地解決他們。
我們並不會介紹新的概念，
我們只是練習我們剛學到的寫程式的技巧。
每一節都會探討不同的問題。
會先描述問題，然後用最好的方式解決他。


==運算逆波蘭表示法(Reverse Polish notation form)

我們在學校學習數學的時候，我們多半都是用中置(infix)的方式來寫數學式。
例如說，我們會寫``10 - (4 + 3) * 2``。``+``, ``*``, ``-``是中置運算子(infix operators)。
在Haskell中就像是``+``或``elem``一樣。
這種寫法對於人類來說很容易閱讀與理解，
但缺點是我們必須用括號來描述運算的優先順序。


逆波蘭表示法是另外一種數學式的描述方法。
乍看之下顯得怪異，但他其實很容易理解並使用。
因為我們不需要括弧來描述，也很容易放進計算機裡面運算。
儘管現在的計算機都是用中置的方式讓你輸入，有些人仍堅持用RPN的計算機。
前述的算式如果表達成RPN的話會是``10 4 3 + 2 * -``。
我們要如何計算他的結果呢？
可以想想堆疊，基本上你是從左向右閱讀算式。
每當碰到一個數值，就把他堆上堆疊。
當我們碰到一個運算子。
就把兩個數值從堆疊上拿下來，
用運算子運算兩個數值然後把結果推回堆疊中。
當你消耗完整個算式的時候，
而且假設你的算式是合法的，
那你就應該只剩一個數值在堆疊中，

[^img/rpn.png]



[^img/calculator.png]




[^img/roads.png]


==路徑規劃
